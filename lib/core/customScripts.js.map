{"version":3,"sources":["../../src/core/customScripts.js"],"names":["debug","require","Script","name","version","registeredScripts","Map","addScript","has","get","set","CustomScripts","scripts","arrScripts","Array","forEach","script","scriptWithOptions","template","customScriptVersion","getElements","elements","id","value","push","length","clear"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,oBAAjB,CAAd;;AAGA;;;;AAIA,IAAMC,SAAS,SAATA,MAAS;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,OAAT,QAASA,OAAT;AAAA,SACb;AACE,eADF;AAEE,sBAAgBD,IAFlB;AAGE,4CAAsCA,IAAtC,SAA8CC,OAA9C;AAHF,IADa;AAAA,CAAf;;AAaA;;;;;AAKA,IAAMC,oBAAoB,IAAIC,GAAJ,EAA1B;;AAEA;;;;;AAKA,IAAMC,YAAY,SAAZA,SAAY,CAACJ,IAAD,EAAOC,OAAP,EAAmB;AACnC,MACG,CAACC,kBAAkBG,GAAlB,CAAsBL,IAAtB,CAAF,IACEE,kBAAkBI,GAAlB,CAAsBN,IAAtB,EAA4BC,OAA5B,GAAsCA,OAF1C,EAGE;AACAJ,UAAM,qBAAN,EAA6BG,IAA7B;AACAE,sBAAkBK,GAAlB,CAAsBP,IAAtB,EAA4B,EAAEC,gBAAF,EAA5B;AACD,GAND,MAMO;AACLJ,UAAM,wDAAN,EAAgEG,IAAhE,EAAsEC,OAAtE;AACD;AACF,CAVD;;AAYA;;;;;;;;;;AAUA,IAAMO,gBAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACjC,MAAMC,aAAcD,mBAAmBE,KAApB,GAA6BF,OAA7B,GAAuC,CAACA,OAAD,CAA1D;AACAC,aAAWE,OAAX,CACE,UAACC,MAAD,EAAY;AACVhB,UAAM,mBAAN,EAA2BgB,MAA3B;AACA,QAAMC,oBAAqBD,kBAAkBF,KAA7C;AACA,QAAMX,OAAQc,iBAAD,GAAsBD,OAAO,CAAP,CAAtB,GAAkCA,MAA/C;AACA,QAAMZ,UAAWa,iBAAD,GAAsBD,OAAO,CAAP,CAAtB,GAAkC,mBAASE,QAAT,CAAkBC,mBAApE;AACAZ,cAAUJ,IAAV,EAAgBC,OAAhB;AACD,GAPH;AASD,CAXD;;AAaA;;;AAGAO,cAAcS,WAAd,GAA4B,YAAM;AAChC,MAAMC,WAAW,EAAjB;AACA,MAAIC,KAAK,CAAT;AACAjB,oBAAkBU,OAAlB,CACE,UAACQ,KAAD,EAAQpB,IAAR,EAAiB;AACfkB,aAASG,IAAT,CACE,8BAAC,MAAD,IAAQ,MAAMrB,IAAd,EAAoB,SAASoB,MAAMnB,OAAnC,EAA4C,KAAKkB,EAAjD,GADF;AAGAA,UAAM,CAAN;AACD,GANH;AAQAtB,QAAM,mCAAN,EAA2CqB,SAASI,MAApD;AACA,SAAOJ,QAAP;AACD,CAbD;;AAeAV,cAAce,KAAd,GAAsBrB,kBAAkBqB,KAAxC;;kBAEef,a","file":"customScripts.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport defaults from './defaults';\nconst debug = require('debug')('rampt:customscript');\n\n\n/**\n * Convenience function to render amp scripts into the head of the template.\n * @returns {ReactElement}\n */\nconst Script = ({ name, version }) => (\n  <script\n    async\n    custom-element={name}\n    src={`https://cdn.ampproject.org/v0/${name}-${version}.js`}\n  ></script>\n);\n\nScript.propTypes = {\n  name: PropTypes.string.isRequired,\n  version: PropTypes.string.isRequired,\n};\n\n/**\n * registeredScripts is a small store that holds the name and version of the\n * customScripts. Should hold unique scripts, is not allowed the same\n * script more than once.\n */\nconst registeredScripts = new Map();\n\n/**\n* registers a new script into the map.\n* @param {string} name\n* @param {string} version\n*/\nconst addScript = (name, version) => {\n  if (\n    (!registeredScripts.has(name)) ||\n     (registeredScripts.get(name).version < version)\n  ) {\n    debug('Registering script ', name);\n    registeredScripts.set(name, { version });\n  } else {\n    debug('custom-sript [%s] exists already, and it is not newer.', name, version);\n  }\n};\n\n/**\n* Handy interface to register an amp custom-script that will be appended into\n* document's head. It wont register more than once a same script.\n* @param {String|Array(String|[Array])} - Pass the amp script name, or an array\n* that first element tells the name and the second element tells its version.\n* optionally you can pass a list that holds the previous parameters.\n* Valid params: 'amp-script' | ['amp-script', '0.1'] |\n* [ 'amp-script-x', ['amp-script-y','0.1'], 'amp-script-z', ... ]\n* If the script exists already, only the newer will precede.\n*/\nconst CustomScripts = (scripts) => {\n  const arrScripts = (scripts instanceof Array) ? scripts : [scripts];\n  arrScripts.forEach(\n    (script) => {\n      debug('Parse new script ', script);\n      const scriptWithOptions = (script instanceof Array);\n      const name = (scriptWithOptions) ? script[0] : script;\n      const version = (scriptWithOptions) ? script[1] : defaults.template.customScriptVersion;\n      addScript(name, version);\n    }\n  );\n};\n\n/**\n* @returns {Array with ReactElemnt}\n**/\nCustomScripts.getElements = () => {\n  const elements = [];\n  let id = 0;\n  registeredScripts.forEach(\n    (value, name) => {\n      elements.push(\n        <Script name={name} version={value.version} key={id} />\n      );\n      id += 1;\n    }\n  );\n  debug('Retrieveing customScripts. total:', elements.length);\n  return elements;\n};\n\nCustomScripts.clear = registeredScripts.clear;\n\nexport default CustomScripts;\n"]}