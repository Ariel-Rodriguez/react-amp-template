{"version":3,"sources":["../../src/core/index.js"],"names":["debug","require","Core","options","settings","Object","assign","injectDOMPropertyConfig","DOMPropertyConfig","render","renderToFile","getValidator","component","renderStatic","renderToStaticMarkup","config","template","Promise","fulfill","reject","aphrodite","html","css","getElements","document","doctype","head","customStyles","content","customScripts","customMetas","ampValidationEnabled","validateMarkup","then","catch","error","file","toRender","staticMarkup","writeFileSync","err","Error","getInstance","instance","validator","markup"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { DOMProperty } from 'react-dom/lib/ReactInjection';\nimport { StyleSheetServer } from 'aphrodite/no-important';\nimport customScripts from './customScripts';\nimport customMetas from './customMetas';\nimport ampValidator from '../utils/ampvalidator';\nimport Template from '../template';\nimport DEFAULTS from './defaults';\nconst debug = require('debug')('rampt:core');\n\n/**\n * A class that manages ReactDOMServer & ModularCSS to\n * transpile ReactElements into a single valid AMP HTML document.\n * @param {Object} options - its defaults is a set of DOMProperty needed to\n * prevent React in ignore AMP's attrs and custom-elements.\n * @export\n * @constructor\n */\nclass Core {\n  constructor(options) {\n    this.settings = Object.assign({}, DEFAULTS, options);\n    debug('Injecting AMP DOMProperties.');\n    DOMProperty.injectDOMPropertyConfig(this.settings.DOMPropertyConfig);\n    this.render = ::this.render;\n    this.renderToFile = ::this.renderToFile;\n    this.getValidator = ::this.getValidator;\n  }\n\n  /**\n   * Aphrodite's css server-side rendering\n   * 'https://github.com/Khan/aphrodite'\n   * @param {ReactElement} component\n   * @returns {Object} - { css, html }\n   */\n  aphrodite(component) {\n    debug('Running aphrodite.');\n    return StyleSheetServer.renderStatic(() =>\n      ReactDOMServer.renderToStaticMarkup(component)\n    );\n  }\n\n  /**\n   * Creates a Promise and fulfills it with the given component rendered into a\n   * a valid AMP HTML document reduced to a single string.\n   * The component is allowed to contain childrens with custom AMP elements.\n   * @param {ReactElement} component - The component root to render into body.\n   * @param {Object} config - required and contains few optional\n   * parameters for AMP template.\n   * @returns {Promise[string]} - String that contains the static markup\n   */\n  render(component, config) {\n    const template = { ...DEFAULTS.template, ...config };\n    debug('Template settings:', template);\n    return new Promise((fulfill, reject) => {\n      try {\n        const { html, css } = this.aphrodite(component);\n        debug('Executing reactDOMServer.');\n        debug('Metas:', customMetas.getElements());\n        debug('Scripts:', customScripts.getElements());\n\n        const document = this.settings.doctype +\n          ReactDOMServer.renderToStaticMarkup(\n            <Template\n              html={template.html}\n              head={{\n                ...template.head,\n                customStyles: css.content,\n                customScripts: customScripts.getElements(),\n                customMetas: customMetas.getElements(),\n              }}\n              body={html}\n            />\n          );\n        if (template.ampValidationEnabled) {\n          debug('AMP validation is enabled.');\n          return this.validateMarkup(document).then(fulfill).catch(reject);\n        }\n        return fulfill(document);\n      } catch (error) {\n        return reject(error);\n      }\n    });\n  }\n\n  renderToFile(file, ...toRender) {\n    return this.render(...toRender)\n    .then((staticMarkup) => {\n      debug('Rendering to file --> ', file);\n      try {\n        fs.writeFileSync(file, staticMarkup);\n        return staticMarkup;\n      } catch (err) {\n        throw new Error(err);\n      }\n    });\n  }\n\n  getValidator() {\n    debug('Waiting for validator.');\n    return ampValidator.getInstance()\n      .then((instance) => (this.validator = instance))\n      .then(() => (debug('Validator has arrived :).')));\n  }\n\n  validateMarkup(markup) {\n    debug('validating markup.');\n    return this.getValidator()\n      .then(() => {\n        this.validator.validateMarkup(markup);\n        return markup;\n      });\n  }\n}\n\nexport default Core;\n"]}