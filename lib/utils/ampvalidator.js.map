{"version":3,"sources":["../../src/utils/ampvalidator.js"],"names":["debug","require","enhanceValidator","script","validateString","sandbox","amp","validator","validateMarkup","markup","ignoreErrors","validationResult","status","errors","forEach","error","severity","params","code","col","specUrl","Error","instance","getInstance","resolve","__dirname","then"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,iBAAjB,CAAd;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,MAAD,EAAY;AACnC,MAAMC,iBAAiBD,OAAOE,OAAP,CAAeC,GAAf,CAAmBC,SAAnB,CAA6BH,cAApD;;AAEA,SAAO;AACLI,oBAAgB,wBAACC,MAAD,EAASC,YAAT,EAA0B;AACxC,UAAMC,mBAAmBP,eAAeK,MAAf,EAAuB,KAAvB,CAAzB;AACA,UAAI,CAACC,YAAD,IAAiBC,iBAAiBC,MAAjB,KAA4B,MAAjD,EAAyD;AACvDD,yBAAiBE,MAAjB,CAAwBC,OAAxB,CAAgC,UAACC,KAAD,EAAW;AACzCf,gBAASe,MAAMC,QAAf,SAA2BD,MAAME,MAAjC,2BACSF,MAAMG,IADf,aAC2BH,MAAMI,GADjC,SACwCJ,MAAMK,OAD9C;AAED,SAHD;AAIApB,cAAMS,MAAN;AACA,cAAM,IAAIY,KAAJ,CAAUV,iBAAiBE,MAA3B,CAAN;AACD;AACDb,YAAM,0BAAN,EAAkCW,iBAAiBC,MAAnD;AACA,aAAOD,gBAAP;AACD;AAbI,GAAP;AAeD,CAlBD;;AAoBA,IAAIW,iBAAJ;AACA,IAAMC,cAAc,SAAdA,WAAc,GAAM;AACxB,MAAI,CAACD,QAAL,EAAe;AACbA,eAAW,2BAAiBC,WAAjB,CACT,eAAKC,OAAL,CAAaC,SAAb,EAAwB,4BAAxB,CADS,EAETC,IAFS,CAEJxB,gBAFI,CAAX;AAGD;AACD,SAAOoB,QAAP;AACD,CAPD;;kBASe;AACbC;AADa,C","file":"ampvalidator.js","sourcesContent":["import amphtmlValidator from 'amphtml-validator'\nimport path from 'path'\nconst debug = require('debug')('rampt:validator')\n\nconst enhanceValidator = (script) => {\n  const validateString = script.sandbox.amp.validator.validateString\n\n  return {\n    validateMarkup: (markup, ignoreErrors) => {\n      const validationResult = validateString(markup, 'AMP')\n      if (!ignoreErrors && validationResult.status !== 'PASS') {\n        validationResult.errors.forEach((error) => {\n          debug(`${error.severity} ${error.params}\n            line:${error.code} col:${error.col} ${error.specUrl}`)\n        })\n        debug(markup)\n        throw new Error(validationResult.errors)\n      }\n      debug('AMP validation status %s', validationResult.status)\n      return validationResult\n    },\n  }\n}\n\nlet instance\nconst getInstance = () => {\n  if (!instance) {\n    instance = amphtmlValidator.getInstance(\n      path.resolve(__dirname, '../../vendors/validator.js')\n    ).then(enhanceValidator)\n  }\n  return instance\n}\n\nexport default {\n  getInstance,\n}\n"]}