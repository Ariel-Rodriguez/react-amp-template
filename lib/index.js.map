{"version":3,"sources":["../src/index.js"],"names":["core","renderToStaticMarkup","render","renderToFile","scripts"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA;AACO,IAAMA,sBAAO,oBAAb;;AAEP;;;;;;;;;AASO,IAAMC,sDAAuBD,KAAKE,MAAlC;;AAEP;;;;;;;;AAQO,IAAMC,sCAAeH,KAAKG,YAA1B;;AAEP;;;;;;;;;;AAUO,IAAMC,mDAAN","file":"index.js","sourcesContent":["import Core from './core';\nimport customScripts from './core/customScripts';\n\n// CJS singleton instance.\n// TODO: find an elegant way pattern for it.\nexport const core = new Core();\n\n/**\n * Creates a Promise and fulfills this with a string that contains a valid\n * AMP HTML document stemmed from server side rendering of given component.\n * The component is allowed to contain childrens with custom AMP elements.\n * @param {ReactElement} component - The component root to render into body.\n * @param {Object} config - required and contains few optional\n * parameters for AMP template.\n * @returns {Promise[string]} - String that contains the static markup\n */\nexport const renderToStaticMarkup = core.render;\n\n/**\n* Calls for render and writes the content into disc.\n* @param {String} output path.\n* @param {ReactElement} component - The component root to render into body.\n* @param {Object} config - required and contains few optional\n* parameters for AMP template.\n* @returns {Promise}\n*/\nexport const renderToFile = core.renderToFile;\n\n/**\n* Handy interface to register an amp custom-script that will be appended into\n* document's head. It wont register more than once a same script.\n* @param {String|Array(String|[Array])} - Pass the amp script name, or an array\n* that first element tells the name and the second element tells its version.\n* optionally you can pass a list that holds the previous parameters.\n* Valid params: 'amp-script' | ['amp-script', '0.1'] |\n* [ 'amp-script-x', ['amp-script-y','0.1'], 'amp-script-z', ... ]\n* If the script exists already, only the newer will precede.\n*/\nexport const scripts = customScripts;\n"]}