{"version":3,"sources":["../../src/core/Tags.js"],"names":["debug","require","COLLECTION_SCRIPT","Map","COLLECTION_META","SETTINGS","template","tags","Tags","options","clear","length","addScript","scripts","arrScripts","Array","forEach","script","scriptWithOptions","name","version","has","get","set","getScripts","elements","id","value","push","addMeta","meta","arrMeta","JSON","stringify","type","content","getMetas","metas","map","key","createElement"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,YAAjB,CAAd;;AAEA,IAAMC,oBAAoB,IAAIC,GAAJ,EAA1B;AACA,IAAMC,kBAAkB,EAAxB;AACA,IAAMC,WAAW,mBAASC,QAAT,CAAkBC,IAAnC;;IAEMC,I,GACJ,cAAYC,OAAZ,EAAqB;AAAA;;AACnBT,QAAM,6BAAN;AACA;;;;;AAKAE,oBAAkBQ,KAAlB;AACAN,kBAAgBO,MAAhB,GAAyB,CAAzB;AACD,C;;AAGD;;;;;;;;;;;;AAUK,IAAMC,gCAAY,SAAZA,SAAY,CAACC,OAAD,EAAa;AAClC,MAAMC,aAAcD,mBAAmBE,KAApB,GAA6BF,OAA7B,GAAuC,CAACA,OAAD,CAA1D;AACAC,aAAWE,OAAX,CACE,UAACC,MAAD,EAAY;AACV,QAAMC,oBAAqBD,kBAAkBF,KAA7C;AACA,QAAMI,OAAQD,iBAAD,GAAsBD,OAAO,CAAP,CAAtB,GAAkCA,MAA/C;AACA,QAAMG,UAAWF,iBAAD,GAAsBD,OAAO,CAAP,CAAtB,GAAkCZ,SAAS,oBAAT,CAAlD;;AAEA,QACG,CAACH,kBAAkBmB,GAAlB,CAAsBF,IAAtB,CAAF,IACCjB,kBAAkBoB,GAAlB,CAAsBH,IAAtB,EAA4BC,OAA5B,GAAsCA,OAFzC,EAGE;AACApB,YAAM,qBAAN,EAA6BmB,IAA7B;AACAjB,wBAAkBqB,GAAlB,CAAsBJ,IAAtB,EAA4B,EAAEC,gBAAF,EAA5B;AACD,KAND,MAMO;AACLpB,YAAM,wDAAN,EAAgEmB,IAAhE,EAAsEC,OAAtE;AACD;AACF,GAfH;AAiBD,CAnBI;;AAqBL;;;AAGK,IAAMI,kCAAa,SAAbA,UAAa,GAAM;AAC9B,MAAMC,WAAW,EAAjB;AACA,MAAIC,KAAK,CAAT;AACAxB,oBAAkBc,OAAlB,CACE,UAACW,KAAD,EAAQR,IAAR,EAAiB;AACfM,aAASG,IAAT,CACE,kDAAQ,MAAMT,IAAd,EAAoB,SAASQ,MAAMP,OAAnC,EAA4C,KAAKM,EAAjD,GADF;AAGAA,UAAM,CAAN;AACD,GANH;AAQA,SAAOD,QAAP;AACD,CAZM;;AAeL;;AAEK,IAAMI,4BAAU,SAAVA,OAAU,CAACC,IAAD,EAAU;AAC/B,MAAMC,UAAWD,gBAAgBf,KAAjB,GAA0Be,IAA1B,GAAiC,CAACA,IAAD,CAAjD;AACAC,UAAQf,OAAR,CACE,UAACc,IAAD,EAAU;AACR9B,UAAM,mBAAN,EAA2BgC,KAAKC,SAAL,CAAeH,IAAf,CAA3B;AACA1B,oBAAgBwB,IAAhB,CAAqB;AACnBM,YAAMJ,KAAKI,IADQ;AAEnBC,eAASL,KAAKK;AAFK,KAArB;AAID,GAPH;AASD,CAXM;;AAaA,IAAMC,8BAAW,SAAXA,QAAW,GAAM;AAC5B,MAAMC,QAAQjC,gBAAgBkC,GAAhB,CAAoB,UAACR,IAAD,EAAOS,GAAP,EAAe;AAC/C,QAAIT,KAAKI,IAAL,KAAc,qBAAlB,EAAyC;AACvC,aAAO,mDAAQ,MAAK,qBAAb,IAAuC,yBAAUJ,KAAKK,OAAf,CAAvC,EAAP;AACD;AACD,WAAO,gBAAMK,aAAN,CAAoBV,KAAKI,IAAzB,aAAiCK,QAAjC,IAAyCT,KAAKK,OAA9C,EAAP;AACD,GALa,CAAd;AAMA,SAAOE,KAAP;AACD,CARM;;kBAWQ7B,I","file":"Tags.js","sourcesContent":["import React from 'react'\nimport innerHTML from '../utils/innerHTML'\nimport Script from '../components/Script'\nimport DEFAULTS from './defaults'\nconst debug = require('debug')('rampt:tags')\n\nconst COLLECTION_SCRIPT = new Map()\nconst COLLECTION_META = []\nconst SETTINGS = DEFAULTS.template.tags\n\nclass Tags {\n  constructor(options) {\n    debug('Clearing meta/scripts tags.')\n    /**\n     * scripts is a small store that holds the name and version of the\n     * customScripts. Should hold unique scripts, is not allowed the same\n     * script more than once.\n    **/\n    COLLECTION_SCRIPT.clear()\n    COLLECTION_META.length = 0\n  }\n}\n\n  /**\n  * Handy interface to register an amp custom-script that will be appended into\n  * document's head. It wont register more than once a same script.\n  * @param {String|Array(String|[Array])} - Pass the amp script name, or an array\n  * that first element tells the name and the second element tells its version.\n  * optionally you can pass a list that holds the previous parameters.\n  * Valid params: 'amp-script' | ['amp-script', '0.1'] |\n  * [ 'amp-script-x', ['amp-script-y','0.1'], 'amp-script-z', ... ]\n  * If the script exists already, only the newer will precede.\n  */\nexport const addScript = (scripts) => {\n    const arrScripts = (scripts instanceof Array) ? scripts : [scripts]\n    arrScripts.forEach(\n      (script) => {\n        const scriptWithOptions = (script instanceof Array)\n        const name = (scriptWithOptions) ? script[0] : script\n        const version = (scriptWithOptions) ? script[1] : SETTINGS['amp-script-version']\n\n        if (\n          (!COLLECTION_SCRIPT.has(name)) ||\n          (COLLECTION_SCRIPT.get(name).version < version)\n        ) {\n          debug('Registering script ', name)\n          COLLECTION_SCRIPT.set(name, { version })\n        } else {\n          debug('custom-sript [%s] exists already, and it is not newer.', name, version)\n        }\n      }\n    )\n  }\n\n  /**\n  * @returns {Array with ReactElemnt}\n  **/\nexport const getScripts = () => {\n  const elements = []\n  let id = 0\n  COLLECTION_SCRIPT.forEach(\n    (value, name) => {\n      elements.push(\n        <Script name={name} version={value.version} key={id} />\n      )\n      id += 1\n    }\n  )\n  return elements\n}\n\n\n  /**\n  */\nexport const addMeta = (meta) => {\n  const arrMeta = (meta instanceof Array) ? meta : [meta]\n  arrMeta.forEach(\n    (meta) => {\n      debug('Registering meta ', JSON.stringify(meta))\n      COLLECTION_META.push({\n        type: meta.type,\n        content: meta.content\n      })\n    }\n  )\n}\n\nexport const getMetas = () => {\n  const metas = COLLECTION_META.map((meta, key) => {\n    if (meta.type === 'application/ld+json') {\n      return <script type=\"application/ld+json\" {...innerHTML(meta.content)} />\n    }\n    return React.createElement(meta.type, { key, ...meta.content })\n  })\n  return metas\n}\n\n\nexport default Tags\n"]}