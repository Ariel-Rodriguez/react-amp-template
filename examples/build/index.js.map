{"version":3,"sources":["../src/index.js"],"names":["debug","require","error","createTemplate","rampt","ampValidations","template","head","title","canonical","renderStatic","catch","createServer","request","response","then","html","writeHeader","write","end","listen","on","err","socket"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,gBAAjB,CAAd;AACA,IAAMC,QAAQD,QAAQ,OAAR,EAAiB,sBAAjB,CAAd;;WAqBkB,+CAAK,YAAW,oBAAhB,G;;AAlBlB,IAAME,iBAAiB,SAAjBA,cAAiB,GAAM;AAC3B;;;;;;AAMA,MAAMC,QAAQ,kBAAU;AACtBC,oBAAgB,IADM;AAEtBC,cAAU;AACRC,YAAM;AACJC,eAAO,oBADH;AAEJC,mBAAW;AAFP;AADE;AAFY,GAAV,CAAd;;AAUA,SAAOL,MACJM,YADI,OAEJC,KAFI,CAEET,KAFF,CAAP;AAGD,CApBD;;AAuBA,eAAKU,YAAL,CAAkB,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACvCX,mBACCY,IADD,CACM,UAASC,IAAT,EAAc;AAClBF,aAASG,WAAT,CAAqB,GAArB,EAA0B,EAAE,gBAAgB,WAAlB,EAA1B;AACAH,aAASI,KAAT,CAAeF,IAAf;AACAF,aAASK,GAAT;AACD,GALD;AAMD,CAPD,EASCC,MATD,CASQ,IATR,EAWCC,EAXD,CAWI,aAXJ,EAWmB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAClCA,SAAOJ,GAAP,CAAW,kCAAX;AACAjB,QAAMoB,GAAN;AACD,CAdD;;AAgBAtB,MAAM,wBAAN","file":"index.js","sourcesContent":["import http from 'http';\nimport React from 'react';\nimport App from './app';\nimport RAMPT from '../../lib';\nconst debug = require('debug')('example:server');\nconst error = require('debug')('example:server:error');\n\n\nconst createTemplate = () => {\n  /**\n  * react-amp-template returns a promise which will be fulfilled\n  * with a string that holds the whole HTML document ready to serve.\n  * The promise will reject for any internal error.\n  * Once done rendering, proceed to create the server.\n  */\n  const rampt = new RAMPT({\n    ampValidations: true,\n    template: {\n      head: {\n        title: 'react amp template',\n        canonical: 'http://non-amp.html',\n      }\n    }\n  });\n\n  return rampt\n    .renderStatic(<App bannerText=\"React-AMP-Template\" />)\n    .catch(error);\n}\n\n\nhttp.createServer((request, response) => {\n  createTemplate()\n  .then(function(html){\n    response.writeHeader(200, { 'Content-Type': 'text/html' });\n    response.write(html);\n    response.end();\n  });\n})\n\n.listen(8000)\n\n.on('clientError', (err, socket) => {\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  error(err);\n});\n\ndebug('Listening on port 8000');\n"]}