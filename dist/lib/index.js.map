{"version":3,"sources":["../src/index.js"],"names":["debug","require","core","renderToStaticMarkup","component","props","render","renderToFile","file","beforeWrite","cb","Error","pros","template","then","writeFileSync","err","server"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,QAAjB,CAAd;AACA,IAAMC,OAAO,mBAAS,EAAT,CAAb;;AAEO,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAACC,SAAD,EAAYC,KAAZ;AAAA,SAClCH,KAAKI,MAAL,CAAYF,SAAZ,EAAuBC,KAAvB,CADkC;AAAA,CAA7B;;AAIA,IAAME,sCAAe,SAAfA,YAAe,CAACC,IAAD,EAAOJ,SAAP,EAAkBC,KAAlB,EAAyBI,WAAzB,EAAyC;AACnE,MAAIC,KAAKD,WAAT;AACA,MAAI,CAAC,2BAAeL,SAAf,CAAL,EAAgC;AAC9B,UAAM,IAAIO,KAAJ,CAAU,yCAAV,CAAN;AACD;AACD,MAAIN,KAAJ,EAAW;AACT,QAAI,OAAOO,IAAP,KAAgB,UAApB,EAAgC;AAC9BF,WAAKL,KAAL;AACD,KAFD,MAEO,IAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EAA+B;AACpC,YAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF,GAND,MAMO;AACLD,SAAK,YAACG,QAAD;AAAA,aAAcA,QAAd;AAAA,KAAL;AACD;AACD,SAAOX,KAAKI,MAAL,CAAYF,SAAZ,EAAuBC,KAAvB,EACNS,IADM,CACDJ,EADC,EAENI,IAFM,CAED,UAACD,QAAD,EAAc;AAClB,QAAI;AACFb,YAAM,cAAN,EAAsBQ,IAAtB;AACA,mBAAGO,aAAH,CAAiBP,IAAjB,EAAuBK,QAAvB;AACD,KAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,YAAM,IAAIL,KAAJ,CAAUK,GAAV,CAAN;AACD;AACF,GATM,CAAP;AAUD,CAxBM;;kBA0BQ;AACbC,0BADa;AAEbf;AAFa,C","file":"index.js","sourcesContent":["import fs from 'fs';\nimport { isValidElement } from 'react';\nimport server from './server';\nimport Core from './core';\n\nconst debug = require('debug')('render');\nconst core = new Core({});\n\nexport const renderToStaticMarkup = (component, props) => (\n  core.render(component, props)\n);\n\nexport const renderToFile = (file, component, props, beforeWrite) => {\n  let cb = beforeWrite;\n  if (!isValidElement(component)) {\n    throw new Error('Component given is not valid to render.');\n  }\n  if (props) {\n    if (typeof pros === 'function') {\n      cb = props;\n    } else if (typeof props !== 'object') {\n      throw new Error('Props must be a POJO!');\n    }\n  } else {\n    cb = (template) => template;\n  }\n  return core.render(component, props)\n  .then(cb)\n  .then((template) => {\n    try {\n      debug('toFile: [%s]', file);\n      fs.writeFileSync(file, template);\n    } catch (err) {\n      throw new Error(err);\n    }\n  });\n};\n\nexport default {\n  server,\n  core,\n};\n"]}